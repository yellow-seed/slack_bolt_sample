// フォーマットの詳細については、https://aka.ms/devcontainer.json を参照してください。設定オプションについては、以下のREADMEを参照してください。
// https://github.com/devcontainers/templates/tree/main/src/python{
{
	// UIに表示されるdevコンテナの名前
	"name": "bolt_sample",

	// "build": {
	// 	// Dockerfileを使用する場合に必要です。コンテナの中身を定義するDockerfileの場所です。パスはdevcontainer.jsonファイルからの相対パスです。
	// 	"dockerfile": "../Dockerfile"
	// },

	"dockerComposeFile": [
		// Docker Composeを使用する場合に必要です。コンテナの中身を定義するDocker Composeファイルの場所です。パスはdevcontainer.jsonファイルからの相対パスです。
		"../docker-compose.yml",
		// "docker-compose.yml"
	],
	// // devcontainerでshellなど？で使用するdocker composeのservice名
  "service": "app",
  // // 指定したserviceコンテナのworkspaceフォルダ
  "workspaceFolder": "/workspace/${localWorkspaceFolderBasename}",
	// コンテナ内で参照される環境変数.
	"containerEnv": {
		// タイムゾーンが Asia/Tokyoになるよう設定。時刻に起因する問題の調査は難しいので、ここで明示的に設定
		"TZ": "Asia/Tokyo"
	},
	// Use this environment variable if you need to bind mount your local source code into a new container.
	"remoteEnv": {
		"LOCAL_WORKSPACE_FOLDER": "${localWorkspaceFolder}"
	},
	// 開発用コンテナに追加する機能 詳細は: https://containers.dev/features.
	// "features": {},
	// コンテナ内のポート一覧をローカルで利用できるようにするには、「forwardPorts」を使用します。
	// "forwardPorts": [],
	// コンテナ作成後にコマンドを実行するには、「postCreateCommand」を使用します。
	// "postCreateCommand": "pip3 install --user -r requirements.txt",
	// サポートツールで定義された、製品固有のプロパティ
	"customizations": {
		// VS Code特有のプロパティを設定する。
		"vscode": {
			// コンテナ作成時に、*default*コンテナ固有のsettings.json値を設定する。
			"settings": {
				// ファイルの中に紛れ込んだ全角スペースを見つけやすくするための拡張
				"editor.renderWhitespace": "all",
				// Lint機能を有効にするかどうか
				"python.linting.enabled": true,
				// ファイル保存時にLintを実行するか
				"python.linting.lintOnSave": true,
				// Pylance
				// "python.languageServer": "Pylance",
				// "python.analysis.completeFunctionParens": true,
				// Linter(flake8): コードがPEP8に準拠しているかをチェックする
				"python.linting.flake8Path": "/usr/local/bin/flake8",
				// pyLintをOFF
				"python.linting.pylintEnabled": false,
				// flake8をON
				"python.linting.flake8Enabled": true,
				"python.linting.flake8Args": [
					// black の最大文字列数(default= 88) と flake8 の最大文字列数(default= 79)と異なるため調整　(ref: https://dk521123.hatenablog.com/entry/2021/11/10/095258)
					"--max-line-length=210",
					// E203 :コロンの前に空白が入っている
					// W503: 演算子の前に改行
					// W504: 演算子の後に改行
					"--ignore=E203,W503,W504"
				],
				"python.formatting.blackArgs": [
					// black の最大文字列数(default= 88) と flake8 の最大文字列数(default= 79)と異なるため調整
					"--line-length=210"
				],
				// Formatter(black): 自動的にコードを整形する
				"python.formatting.blackPath": "/usr/local/bin/black",
				// Pythonコードの整形に何を使用するか
				"python.formatting.provider": "black",
				// 保存時にフォーマットをON
				"editor.formatOnSave": true,
				"[python]": {
					"editor.defaultFormatter": null
				},
				// pytest起動時のオプションを三つ設定 
				// tests: 対象ディレクトリ,
				// --capture=tee-sys: テストコード内で標準出力された内容をpytestがキャプチャしてターミナルに出力してくれる
				// --vv: pytestがキャプチャした出力を途中で切らずに全て出力
				"python.testing.pytestArgs": ["tests", "--capture=tee-sys", "-vv"],
				// VS Codeがpytestを使ってテストコードを検索
        "python.testing.pytestEnabled": true
			},
			// コンテナ作成時にインストールしたいエクステンションのIDを追加します。
			"extensions": [
				// pythonの拡張
				"ms-python.python",
				// liveshareの拡張
				"ms-vsliveshare.vsliveshare",
				// pythonのインデントを自動で生成する拡張 ref:https://marketplace.visualstudio.com/items?itemName=KevinRose.vsc-python-indent
				"KevinRose.vsc-python-indent",
				// GitHub Copilot
				"GitHub.copilot",
				// GitLens gitを視覚的に表現する拡張
				"eamodio.gitlens",
				// Flake8 Lint
				"ms-python.flake8",
				// Black Formatter
				"ms-python.black-formatter",
				// Annotationコメントを簡単に検索できる拡張
				"Gruntfuggly.todo-tree"
			],
			// devcontainer.jsonをサポートするツールが、関連するツールウィンドウを閉じる/シャットダウンする際に、コンテナを停止させるかどうかを示します。
			// 値は、none、stopContainer（イメージまたはDockerfileのデフォルト）、stopCompose（Docker Composeのデフォルト）です。
			"shutdownAction": "stopCompose"
		}
	}
	// 代わりにrootとして接続する場合は、コメントを解除してください。詳しくは、 https://aka.ms/dev-containers-non-root.
	// "remoteUser": "root"
}